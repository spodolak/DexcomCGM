{"version":3,"sources":["img/mood.png","img/app_logo_invert.png","components/Orb.js","components/CurrentBloodSugar.js","components/Calibrate.js","firebase.js","components/AddHighSymptom.js","components/AddLowSymptom.js","components/AddSymptom.js","components/DexcomError.js","components/Graph.js","components/AppFooter.js","components/AppControl.js","components/Dexcom.js","components/DexcomControl.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Orb","props","alertState","Fragment","className","useStyles","makeStyles","root","width","center","margin","marginTop","CurrentBloodSugar","value","currentAlert","onSwitchingViews","classes","Grid","container","item","xs","class","type","onClick","Calibrate","alertCheck","onCalibrate","Form","Group","controlId","Label","InputGroup","size","Control","classType","placeholder","onChange","style","minWidth","maxWidth","Text","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","AddSymptom","useState","thirsty","setThirsty","frequentUrination","setFrequentUrination","irritable","setIrritable","blurryVision","setBlurryVision","headache","setHeadache","sleepy","setSleepy","sweaty","shaky","hungry","dizzy","onThirstyCheck","onFrequentUrinationCheck","onIrritableCheck","onBlurryVisionCheck","onHeadacheCheck","onSleepyCheck","fetchFirestoreSymptoms","a","firestore","collection","doc","get","then","data","firebasePostSymptom","timeStamp","Date","getTime","currentSymptom","symptoms","update","id","map","key","Row","for","setSweaty","setShaky","setHungry","setDizzy","onSweatyCheck","onShakyCheck","onHungryCheck","onDizzyCheck","postFirebaseSymptom","DexcomError","href","target","rel","onClickingLogIn","Graph","componentDidMount","values","setState","state","series","name","responsive","breakpoint","undefined","options","chart","height","dataLabels","enabled","stroke","curve","xaxis","categories","displayTime","tooltip","x","format","fill","colors","this","React","Component","noAlert","background","lowAlert","highAlert","FootNavigation","isLoggedIn","setValue","setStyle","handleChange","event","newValue","useEffect","handleStyle","BottomNavigation","BottomNavigationAction","label","icon","color","AppControl","getBearerToken","myHeaders","Headers","append","urlencoded","URLSearchParams","window","location","search","slice","fetch","method","headers","body","redirect","response","json","bearerToken","access_token","getBloodSugars","catch","error","console","log","addZero","n","toString","time","getHours","getMinutes","getSeconds","token","currentTime","requestOptions","bloodSugarValues","egvs","currentBloodSugar","realtimeValue","handleAlert","currentView","handleSwitchingViews","view","handleCalibrate","e","parseInt","isLoaded","timer","setInterval","currentlyVisibleState","AddLowSymptom","AddHighSymptom","Dexcom","src","logo","alt","DexcomControl","handleDexcomLogin","dexcomLoggedIn","onLogIn","authorizationCode","code","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.26fd721f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mood.a00cace7.png\";","module.exports = __webpack_public_path__ + \"static/media/app_logo_invert.69feebaf.png\";","import React from 'react';\r\n\r\nfunction Orb(props) {\r\n    const { alertState } = props\r\n    return (\r\n        <React.Fragment>\r\n            <div className={alertState}>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Orb;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport CircleIconButton from \"./CircleIconButton\";\r\nimport Orb from './Orb';\r\nimport { Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    center: {\r\n        margin: 'auto',\r\n    },\r\n    margin: {\r\n        marginTop: '180px',\r\n    }\r\n});\r\n\r\n\r\nexport default function CurrentBloodSugar(props) {\r\n    const { value, currentAlert, onSwitchingViews } = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.root}>\r\n                <Grid container >\r\n                    <Grid item xs={12}>\r\n                        <Orb alertState={\"orb-\" + currentAlert} />\r\n                        <p className=\"egv\">{value}</p>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div className={classes.margin}>\r\n                            <button class=\"outline\" type=\"submit\" onClick={() => onSwitchingViews('add_symptom')}>\r\n                                How do you feel?\r\n                            </button>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nCurrentBloodSugar.propTypes = {\r\n    lowLimit: PropTypes.number,\r\n    highLimit: PropTypes.number,\r\n    value: PropTypes.number,\r\n    onSwitchingViews: PropTypes.func\r\n}\r\n\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\n\r\nfunction Calibrate(props) {\r\n    const { onSwitchingViews, alertCheck, onCalibrate } = props;\r\n\r\n    const submitCalibrate = () => {\r\n        onSwitchingViews('');\r\n        alertCheck();\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Form>\r\n                <Form.Group controlId=\"calibrate\">\r\n                    <Form.Label></Form.Label>\r\n                    <h1 class=\"update\">Enter Blood Sugar</h1>\r\n                    <br></br>\r\n                    <InputGroup size=\"lg\">\r\n                        <Form.Control\r\n                            classType=\"text-center\"\r\n                            type=\"calibrate\"\r\n                            placeholder=\"mg/dL\"\r\n                            onChange={onCalibrate}\r\n                            style={{ margin: \"auto\", minWidth: \"300px\", maxWidth: \"400px\" }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Form.Text className=\"text-muted\">\r\n                        1. Wash and dry your hands <br></br>\r\n              2. Take a fingerstick with your meter<br></br>\r\n              3. Promptly enter the exact value from your meter<br></br>\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <button className=\"outline\" onClick={() => submitCalibrate()} type=\"submit\">\r\n                    Calibrate\r\n          </button>\r\n            </Form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nCalibrate.propTypes = {\r\n    onSwitchingViews: PropTypes.func,\r\n    onCalibrate: PropTypes.func\r\n}\r\n\r\n\r\nexport default Calibrate;","import * as firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport 'firebase/functions';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY ,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// firebase.analytics();\r\n\r\nexport default firebase;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Row } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\nimport firebase from '../firebase.js'\r\n\r\nfunction AddSymptom(props) {\r\n    const [thirsty, setThirsty] = useState(false);\r\n    const [frequentUrination, setFrequentUrination] = useState(false);\r\n    const [irritable, setIrritable] = useState(false);\r\n    const [blurryVision, setBlurryVision] = useState(false);\r\n    const [headache, setHeadache] = useState(false);\r\n    const [sleepy, setSleepy] = useState(false);\r\n    const [sweaty] = useState(false);\r\n    const [shaky] = useState(false);\r\n    const [hungry] = useState(false);\r\n    const [dizzy] = useState(false);\r\n\r\n    const onThirstyCheck = () => {\r\n        setThirsty(!thirsty)\r\n    }\r\n    const onFrequentUrinationCheck = () => {\r\n        setFrequentUrination(!frequentUrination)\r\n    }\r\n    const onIrritableCheck = () => {\r\n        setIrritable(!irritable)\r\n    }\r\n    const onBlurryVisionCheck = () => {\r\n        setBlurryVision(!blurryVision)\r\n    }\r\n    const onHeadacheCheck = () => {\r\n        setHeadache(!headache)\r\n    }\r\n    const onSleepyCheck = () => {\r\n        setSleepy(!sleepy)\r\n    }\r\n\r\n    const fetchFirestoreSymptoms = async () => {\r\n        const data = await firebase.firestore().collection('symptoms').doc('log').get()\r\n            .then(value => { return value.data() })\r\n        return data;\r\n    }\r\n\r\n    const firebasePostSymptom = async () => {\r\n        const timeStamp = new Date().getTime()\r\n        const currentSymptom = {\r\n            [timeStamp]: {\r\n                timeStamp: new Date(),\r\n                symptoms: {\r\n                    thirsty,\r\n                    frequentUrination,\r\n                    irritable,\r\n                    blurryVision,\r\n                    headache,\r\n                    sleepy,\r\n                    sweaty,\r\n                    shaky,\r\n                    hungry,\r\n                    dizzy,\r\n                }\r\n            }\r\n        }\r\n        const data = await fetchFirestoreSymptoms();\r\n        firebase.firestore().collection('symptoms').doc('log').update({ symptoms: [...data.symptoms, currentSymptom] });\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        props.onSwitchingViews('');\r\n        firebasePostSymptom()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Your blood sugar is <span id=\"high-text\">HIGH</span></h1>\r\n            <h1>How do you feel?</h1>\r\n            <br></br>\r\n            <Form>\r\n                {['checkbox'].map((type) => (\r\n                    <div key={`inline-${type}`} className=\"mb-3 ml-4\">\r\n                        <Row className=\"justify-content-center\">\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"thirsty\" type=\"checkbox\" value=\"thirsty\" onChange={onThirstyCheck} />\r\n                                <label className=\"drinkcard-cc thirsty\" for=\"thirsty\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"frequent-urination\" type=\"checkbox\" value=\"frequent-urination\" onChange={onFrequentUrinationCheck} />\r\n                                <label className=\"drinkcard-cc frequent-urination\" for=\"frequent-urination\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"irritable\" type=\"checkbox\" value=\"irritable\" onChange={onIrritableCheck} />\r\n                                <label className=\"drinkcard-cc irritable\" for=\"irritable\"></label>\r\n                            </div>\r\n                        </Row>\r\n                        <Row className=\"justify-content-center\">\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"blurry-vision\" type=\"checkbox\" value=\"blurry-vision\" onChange={onBlurryVisionCheck} />\r\n                                <label className=\"drinkcard-cc blurry-vision\" for=\"blurry-vision\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"headache\" type=\"checkbox\" value=\"headache\" onChange={onHeadacheCheck} />\r\n                                <label className=\"drinkcard-cc headache\" for=\"headache\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"sleepy\" type=\"checkbox\" value=\"sleepy\" onChange={onSleepyCheck} />\r\n                                <label className=\"drinkcard-cc sleepy\" for=\"sleepy\"></label>\r\n                            </div>\r\n                        </Row>\r\n                    </div>\r\n                ))}\r\n                <Row className=\"justify-content-center\">\r\n                    <button class=\"outline\" type=\"submit\" onClick={() => onSubmit()}>\r\n                        Log\r\n        </button>\r\n                </Row>\r\n            </Form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nAddSymptom.propTypes = {\r\n    onSwitchingViews: PropTypes.func\r\n}\r\n\r\n\r\nexport default AddSymptom;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Row } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\nimport firebase from '../firebase.js'\r\n\r\nfunction AddSymptom(props) {\r\n    const [thirsty] = useState(false);\r\n    const [frequentUrination] = useState(false);\r\n    const [irritable, setIrritable] = useState(false);\r\n    const [blurryVision] = useState(false);\r\n    const [headache] = useState(false);\r\n    const [sleepy, setSleepy] = useState(false);\r\n    const [sweaty, setSweaty] = useState(false);\r\n    const [shaky, setShaky] = useState(false);\r\n    const [hungry, setHungry] = useState(false);\r\n    const [dizzy, setDizzy] = useState(false);\r\n\r\n    const onIrritableCheck = () => {\r\n        setIrritable(!irritable)\r\n    }\r\n    const onSleepyCheck = () => {\r\n        setSleepy(!sleepy)\r\n    }\r\n    const onSweatyCheck = () => {\r\n        setSweaty(!sweaty)\r\n    }\r\n    const onShakyCheck = () => {\r\n        setShaky(!shaky)\r\n    }\r\n    const onHungryCheck = () => {\r\n        setHungry(!hungry)\r\n    }\r\n    const onDizzyCheck = () => {\r\n        setDizzy(!dizzy)\r\n    }\r\n\r\n    const fetchFirestoreSymptoms = async () => {\r\n        const data = await firebase.firestore().collection('symptoms').doc('log').get()\r\n            .then(value => { return value.data() })\r\n        return data;\r\n    }\r\n\r\n    const firebasePostSymptom = async () => {\r\n        const timeStamp = new Date().getTime()\r\n        const currentSymptom = {\r\n            [timeStamp]: {\r\n                timeStamp: new Date(),\r\n                symptoms: {\r\n                    thirsty,\r\n                    frequentUrination,\r\n                    irritable,\r\n                    blurryVision,\r\n                    headache,\r\n                    sleepy,\r\n                    sweaty,\r\n                    shaky,\r\n                    hungry,\r\n                    dizzy,\r\n                }\r\n            }\r\n        }\r\n        const data = await fetchFirestoreSymptoms();\r\n        firebase.firestore().collection('symptoms').doc('log').update({ symptoms: [...data.symptoms, currentSymptom] });\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        props.onSwitchingViews('');\r\n        firebasePostSymptom()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Your blood sugar is <span id=\"low-text\">LOW</span></h1>\r\n            <h1>How do you feel?</h1>\r\n            <br></br>\r\n            <Form>\r\n                {['checkbox'].map((type) => (\r\n                    <div key={`inline-${type}`} className=\"mb-3 ml-4\">\r\n                        <Row className=\"justify-content-center\">\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"sweaty\" type=\"checkbox\" value=\"sweaty\" onChange={onSweatyCheck} />\r\n                                <label className=\"drinkcard-cc sweaty\" for=\"sweaty\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"shaky\" type=\"checkbox\" value=\"shaky\" onChange={onShakyCheck} />\r\n                                <label className=\"drinkcard-cc shaky\" for=\"shaky\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"irritable\" type=\"checkbox\" value=\"irritable\" onChange={onIrritableCheck} />\r\n                                <label className=\"drinkcard-cc irritable\" for=\"irritable\"></label>\r\n                            </div>\r\n                        </Row>\r\n                        <Row className=\"justify-content-center\">\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"hungry\" type=\"checkbox\" value=\"hungry\" onChange={onHungryCheck} />\r\n                                <label className=\"drinkcard-cc hungry\" for=\"hungry\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"dizzy\" type=\"checkbox\" value=\"dizzy\" onChange={onDizzyCheck} />\r\n                                <label className=\"drinkcard-cc dizzy\" for=\"dizzy\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"sleepy\" type=\"checkbox\" value=\"sleepy\" onChange={onSleepyCheck} />\r\n                                <label className=\"drinkcard-cc sleepy\" for=\"sleepy\"></label>\r\n                            </div>\r\n                        </Row>\r\n                    </div>\r\n                ))}\r\n                <Row className=\"justify-content-center\">\r\n                    <button class=\"outline\" type=\"submit\" onClick={() => onSubmit()}>\r\n                        Log\r\n        </button>\r\n                </Row>\r\n            </Form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nAddSymptom.propTypes = {\r\n    onSwitchingViews: PropTypes.func\r\n}\r\n\r\n\r\nexport default AddSymptom;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Row } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\nimport firebase from '../firebase.js'\r\n\r\nfunction AddSymptom(props) {\r\n    const [thirsty, setThirsty] = useState(false);\r\n    const [frequentUrination, setFrequentUrination] = useState(false);\r\n    const [irritable, setIrritable] = useState(false);\r\n    const [blurryVision, setBlurryVision] = useState(false);\r\n    const [headache, setHeadache] = useState(false);\r\n    const [sleepy, setSleepy] = useState(false);\r\n    const [sweaty, setSweaty] = useState(false);\r\n    const [shaky, setShaky] = useState(false);\r\n    const [hungry, setHungry] = useState(false);\r\n    const [dizzy, setDizzy] = useState(false);\r\n\r\n    const onThirstyCheck = () => {\r\n        setThirsty(!thirsty)\r\n    }\r\n    const onFrequentUrinationCheck = () => {\r\n        setFrequentUrination(!frequentUrination)\r\n    }\r\n    const onIrritableCheck = () => {\r\n        setIrritable(!irritable)\r\n    }\r\n    const onBlurryVisionCheck = () => {\r\n        setBlurryVision(!blurryVision)\r\n    }\r\n    const onHeadacheCheck = () => {\r\n        setHeadache(!headache)\r\n    }\r\n    const onSleepyCheck = () => {\r\n        setSleepy(!sleepy)\r\n    }\r\n    const onSweatyCheck = () => {\r\n        setSweaty(!sweaty)\r\n    }\r\n    const onShakyCheck = () => {\r\n        setShaky(!shaky)\r\n    }\r\n    const onHungryCheck = () => {\r\n        setHungry(!hungry)\r\n    }\r\n    const onDizzyCheck = () => {\r\n        setDizzy(!dizzy)\r\n    }\r\n\r\n    const fetchFirestoreSymptoms = async () => {\r\n        const data =  await firebase.firestore().collection('symptoms').doc('log').get()\r\n        .then(value => {return value.data()})\r\n        return data;\r\n    }\r\n\r\n    const postFirebaseSymptom = async () => {\r\n        const timeStamp = new Date().getTime()\r\n        const currentSymptom = {\r\n            [timeStamp]: {\r\n                timeStamp: new Date(),\r\n                symptoms: {\r\n                    thirsty,\r\n                    frequentUrination,\r\n                    irritable,\r\n                    blurryVision,\r\n                    headache,\r\n                    sleepy,\r\n                    sweaty,\r\n                    shaky,\r\n                    hungry,\r\n                    dizzy,\r\n                }\r\n            }\r\n        }\r\n        const data = await fetchFirestoreSymptoms();\r\n        firebase.firestore().collection('symptoms').doc('log').update({symptoms: [...data.symptoms, currentSymptom]});\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        props.onSwitchingViews('');\r\n        postFirebaseSymptom()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>How do you feel?</h1>\r\n            <br></br>\r\n            <Form>\r\n                {['checkbox'].map((type) => (\r\n                    <div key={`inline-${type}`} className=\"mb-3 ml-4\">\r\n                        <Row className=\"justify-content-center\">\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"thirsty\" type=\"checkbox\" value=\"thirsty\" onChange={onThirstyCheck} />\r\n                                <label className=\"drinkcard-cc thirsty\" for=\"thirsty\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"frequent-urination\" type=\"checkbox\" value=\"frequent-urination\" onChange={onFrequentUrinationCheck} />\r\n                                <label className=\"drinkcard-cc frequent-urination\" for=\"frequent-urination\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"irritable\" type=\"checkbox\" value=\"irritable\" onChange={onIrritableCheck} />\r\n                                <label className=\"drinkcard-cc irritable\" for=\"irritable\"></label>\r\n                            </div>\r\n                        </Row>\r\n                        <Row className=\"justify-content-center\">\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"blurry-vision\" type=\"checkbox\" value=\"blurry-vision\" onChange={onBlurryVisionCheck} />\r\n                                <label className=\"drinkcard-cc blurry-vision\" for=\"blurry-vision\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"headache\" type=\"checkbox\" value=\"headache\" onChange={onHeadacheCheck} />\r\n                                <label className=\"drinkcard-cc headache\" for=\"headache\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"sleepy\" type=\"checkbox\" value=\"sleepy\" onChange={onSleepyCheck} />\r\n                                <label className=\"drinkcard-cc sleepy\" for=\"sleepy\"></label>\r\n                            </div>\r\n                        </Row>\r\n                        <Row className=\"justify-content-center\">\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"sweaty\" type=\"checkbox\" value=\"sweaty\" onChange={onSweatyCheck} />\r\n                                <label className=\"drinkcard-cc sweaty\" for=\"sweaty\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"shaky\" type=\"checkbox\" value=\"shaky\" onChange={onShakyCheck} />\r\n                                <label className=\"drinkcard-cc shaky\" for=\"shaky\"></label>\r\n                            </div>\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"hungry\" type=\"checkbox\" value=\"hungry\" onChange={onHungryCheck} />\r\n                                <label className=\"drinkcard-cc hungry\" for=\"hungry\"></label>\r\n                            </div>\r\n                        </Row>\r\n                        <Row className=\"justify-content-center\">\r\n                            <div className=\"cc-selector\">\r\n                                <input id=\"dizzy\" type=\"checkbox\" value=\"dizzy\" onChange={onDizzyCheck} />\r\n                                <label className=\"drinkcard-cc dizzy\" for=\"dizzy\"></label>\r\n                            </div>\r\n                        </Row>\r\n                    </div>\r\n                ))}\r\n                <Row className=\"justify-content-center\">\r\n                    <button class=\"outline\" type=\"submit\" onClick={() => onSubmit()}>\r\n                        Log\r\n                    </button>\r\n                </Row>\r\n            </Form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nAddSymptom.propTypes = {\r\n    onSwitchingViews: PropTypes.func\r\n}\r\n\r\n\r\nexport default AddSymptom;","import React from 'react';\r\n\r\nconst clientId = process.env.REACT_APP_CLIENT_ID;\r\n\r\nfunction DexcomError(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Oops!</h1>\r\n            <h2>Please log into Dexcom</h2><br></br>\r\n            <a\r\n                className=\"App-link\"\r\n                href={'https://sandbox-api.dexcom.com/v2/oauth2/login?client_id=' + clientId + '&redirect_uri=https://spodolak.github.io/DexcomCGM&response_type=code&scope=offline_access&state=auth'}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                onClick={() => props.onClickingLogIn}\r\n            >\r\n                <button className=\"outline\">\r\n                    Log In\r\n    </button>\r\n            </a>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DexcomError;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport ReactApexCharts from 'react-apexcharts';\r\nimport { Row } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport firebase from '../firebase.js'\r\n\r\n\r\nconst fetchFirestoreSymptoms = async () => {\r\n    const data = await firebase.firestore().collection('symptoms').doc('log').get()\r\n        .then(value => { return value.data() })\r\n    return data;\r\n}\r\n\r\n\r\nclass Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            symptoms: [],\r\n            series: [{\r\n                name: 'blood sugar',\r\n                data: props.values.map(value => { return value.value }),\r\n            },\r\n            ],\r\n            responsive: [{\r\n                breakpoint: undefined,\r\n                options: {},\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    height: 500,\r\n                    width: '100%',\r\n                    type: 'area',\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                stroke: {\r\n                    curve: 'smooth'\r\n                },\r\n                xaxis: {\r\n                    type: 'datetime',\r\n                    categories: props.values.map(value => { return value.displayTime })\r\n                },\r\n                tooltip: {\r\n                    x: {\r\n                        format: 'dd/MM/yy HH:mm'\r\n                    },\r\n                },\r\n                fill: {\r\n                    colors: ['#7765E3', '#6564DB', '#2D268E']\r\n                },\r\n                colors: ['#2D268E']\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const values = await fetchFirestoreSymptoms()\r\n        this.setState({ symptoms: values });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Great day!</h1>\r\n                <Row className=\"chart\" id=\"chart\">\r\n                    <ReactApexCharts options={this.state.options} series={this.state.series} type=\"area\" height={350} width=\"180%\" />\r\n                </Row>\r\n                <div>\r\n                    <button className=\"outline\" onClick={() => this.props.onSwitchingViews('')}>\r\n                        Done\r\n                    </button>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nGraph.propTypes = {\r\n    onSwitchingViews: PropTypes.func,\r\n    values: PropTypes.array\r\n}\r\n\r\nexport default Graph;\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport OpacityIcon from '@material-ui/icons/Opacity';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport '../App.css';\r\n\r\nconst useStyles = makeStyles({\r\n    noAlert: {\r\n        width: '100%',\r\n        background: '#2D268E'\r\n    },\r\n    lowAlert: {\r\n        width: '100%',\r\n        background: '#0D0221'\r\n    },\r\n    highAlert: {\r\n        width: '100%',\r\n        background: '#FF1B1C'\r\n        // background: '#F46036'\r\n        // background: '#FF8811'\r\n        // background: '#BC2C1A'\r\n        // background: '#832232'\r\n        // background: '#EF3E36'\r\n        // background: '#FF331F'\r\n    },\r\n});\r\n\r\nexport default function FootNavigation(props) {\r\n    const { isLoggedIn, currentAlert } = props\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState('recents');\r\n    const [style, setStyle] = React.useState(classes.noAlert);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        props.onSwitchingViews(newValue);\r\n    };\r\n\r\n    const handleStyle = () => {\r\n        switch (currentAlert) {\r\n            case 'lowAlert':\r\n                setStyle(classes.lowAlert);\r\n                break;\r\n            case 'highAlert':\r\n                setStyle(classes.highAlert);\r\n                break;\r\n            default:\r\n                setStyle(classes.noAlert)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleStyle();\r\n    });\r\n\r\n    return (\r\n        < React.Fragment >\r\n            <div className=\"footer\">\r\n                {isLoggedIn ?\r\n                    <BottomNavigation value={value} onChange={handleChange} className={style}>\r\n                        <BottomNavigationAction label=\"Calibrate\" value=\"calibrate\" icon={<OpacityIcon />} style={{ color: \"white\" }} />\r\n                        <BottomNavigationAction label=\"Home\" value=\"home\" icon={<HomeIcon />} style={{ color: \"white\" }} />\r\n                        <BottomNavigationAction label=\"Graph\" value=\"graph\" icon={<TimelineIcon />} style={{ color: \"white\" }} />\r\n                    </BottomNavigation> :\r\n                    <BottomNavigation value={value} onChange={handleChange} className={style}>\r\n                        <p id=\"footer\">© 2020 Steph Podolak</p>\r\n                    </BottomNavigation>\r\n                }\r\n            </div>\r\n        </React.Fragment >\r\n    );\r\n}\r\n//","import React from 'react';\r\nimport CurrentBloodSugar from './CurrentBloodSugar';\r\nimport Calibrate from './Calibrate';\r\nimport AddHighSymptom from './AddHighSymptom';\r\nimport AddLowSymptom from './AddLowSymptom';\r\nimport AddSymptom from './AddSymptom';\r\nimport DexcomError from './DexcomError';\r\nimport Graph from './Graph';\r\nimport FootNavigation from './AppFooter.js';\r\n\r\nclass AppControl extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            bearerToken: '',\r\n            currentBloodSugar: null,\r\n            lowAlert: 70,\r\n            highAlert: 180,\r\n            currentAlert: 'noAlert', //'lowAlert or 'highAlert'\r\n            bloodSugarValues: null,\r\n            currentView: null,\r\n            timer: null\r\n        };\r\n    }\r\n\r\n    //////Oauth 2.0 authorization\r\n    //Step 1: Get bearere Token\r\n    getBearerToken = () => {\r\n        var myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n        var urlencoded = new URLSearchParams();\r\n        urlencoded.append(\"client_id\", `${process.env.REACT_APP_CLIENT_ID}`);\r\n        urlencoded.append(\"client_secret\", `${process.env.REACT_APP_CLIENT_SECRET}`);\r\n        urlencoded.append(\"code\", `${window.location.search.slice(6, 38)}`);\r\n        urlencoded.append(\"grant_type\", \"authorization_code\");\r\n        urlencoded.append(\"redirect_uri\", \"https://spodolak.github.io/DexcomCGM\");\r\n        // urlencoded.append(\"redirect_uri\", \"http://localhost:3000\");\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: urlencoded,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(\"https://sandbox-api.dexcom.com/v2/oauth2/token\", requestOptions) //Fetch sandbox dev token\r\n            // fetch(\"https://api.dexcom.com/v2/oauth2/token\", requestOptions) //Fetch dexcom user data\r\n            .then(response => response.json())\r\n            .then((response) => {\r\n                this.setState({ bearerToken: response.access_token });\r\n                this.getBloodSugars(this.state.bearerToken);\r\n            })\r\n            .then(() => { this.getBloodSugars(this.state.bearerToken); })\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    //get current time to fetch up-to-date blood sugars\r\n    getTime = () => {\r\n        function addZero(n) {\r\n            if (n < 10) {\r\n                return \"0\" + n;\r\n            }\r\n            return n.toString();\r\n        }\r\n\r\n        let time = new Date();\r\n        let hours = addZero(time.getHours());\r\n        let minutes = addZero(time.getMinutes());\r\n        let seconds = addZero(time.getSeconds());\r\n\r\n        return hours + \":\" + minutes + \":\" + seconds;\r\n    }\r\n\r\n    //Step 2: Get current blood sugars with bearer token\r\n    getBloodSugars = (token) => {\r\n        let currentTime = this.getTime();\r\n\r\n        var myHeaders = new Headers();\r\n        myHeaders.append(\"Authorization\", `Bearer ${token}`);\r\n\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n        fetch(`https://sandbox-api.dexcom.com/v2/users/self/egvs?startDate=2020-05-25T${currentTime}&endDate=2020-05-26T${currentTime}`, requestOptions) //Fetch sandbox dev data\r\n            // fetch(\"https://api.dexcom.com/v2/users/self/egvs?startDate=2020-05-26T00:00:00&endDate=2020-05-26T23:59:00\", requestOptions) //Fetch dexcom user data\r\n            .then(response => response.json())\r\n            .then((response) => {\r\n                this.setState({ bloodSugarValues: response.egvs });\r\n                this.setState({ currentBloodSugar: response.egvs[0].realtimeValue });\r\n                this.handleAlert();\r\n            })\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.state.bearerToken === '') {\r\n            this.getBearerToken();\r\n        } else {\r\n            this.getBloodSugars(this.state.bearerToken);\r\n        }\r\n        setInterval(() => {\r\n            this.getBloodSugars(this.state.bearerToken);\r\n            this.handleAlert();\r\n        }, 60000);\r\n    }\r\n\r\n    handleAlert = () => {\r\n        if (this.state.currentBloodSugar <= this.state.lowAlert) {\r\n            this.setState({ currentView: 'add_low_symptom', currentAlert: 'lowAlert' })\r\n        } else if (this.state.currentBloodSugar >= this.state.highAlert) {\r\n            this.setState({ currentView: 'add_high_symptom', currentAlert: 'highAlert' })\r\n        } else {\r\n            this.setState({ currentAlert: 'noAlert' })\r\n        }\r\n    }\r\n\r\n    handleSwitchingViews = (view) => {\r\n        this.setState({ currentView: view });\r\n    }\r\n\r\n    handleCalibrate = (e) => {\r\n        this.setState({ currentBloodSugar: parseInt(e.target.value) })\r\n    }\r\n\r\n    render() {\r\n        let currentlyVisibleState = null;\r\n        if (this.state.bloodSugarValues != null) {\r\n            switch (this.state.currentView) {\r\n                case 'calibrate':\r\n                    currentlyVisibleState = <Calibrate onCalibrate={this.handleCalibrate} onSwitchingViews={this.handleSwitchingViews} alertCheck={this.handleAlert} />\r\n                    break;\r\n                case 'add_symptom':\r\n                    currentlyVisibleState = <AddSymptom onSwitchingViews={this.handleSwitchingViews} />\r\n                    break;\r\n                case 'add_low_symptom':\r\n                    currentlyVisibleState = <AddLowSymptom onSwitchingViews={this.handleSwitchingViews} />\r\n                    break;\r\n                case 'add_high_symptom':\r\n                    currentlyVisibleState = <AddHighSymptom onSwitchingViews={this.handleSwitchingViews} />\r\n                    break;\r\n                case 'graph':\r\n                    currentlyVisibleState = <Graph values={this.state.bloodSugarValues} onSwitchingViews={this.handleSwitchingViews} />\r\n                    break;\r\n                case 'home':\r\n                    currentlyVisibleState = <CurrentBloodSugar value={this.state.currentBloodSugar} currentAlert={this.state.currentAlert} onSwitchingViews={this.handleSwitchingViews} />\r\n                    break;\r\n                default:\r\n                    currentlyVisibleState = <CurrentBloodSugar value={this.state.currentBloodSugar} currentAlert={this.state.currentAlert} onSwitchingViews={this.handleSwitchingViews} />\r\n            }\r\n        } else {\r\n            currentlyVisibleState = <DexcomError />\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {currentlyVisibleState}\r\n                <FootNavigation isLoggedIn={true} onSwitchingViews={this.handleSwitchingViews} currentAlert={this.state.currentAlert} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppControl;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from '@material-ui/core';\r\nimport logo from './../img/app_logo_invert.png'\r\nimport FootNavigation from './AppFooter.js';\r\nimport '../App.css';\r\n\r\nconst clientId = process.env.REACT_APP_CLIENT_ID;\r\n\r\nfunction Dexcom(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container className=\"app-logo-fade-in\" >\r\n                <Grid item xs={12}>\r\n                    <img className=\"app-logo-overlay\" src={logo} alt=\"icon\" width=\"300px\" height=\"300px\" />\r\n                    <div className=\"app-logo\">\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <h4>Your child's diabetic mood ring</h4><br></br>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <a\r\n                        className=\"App-link\"\r\n                        href={'https://sandbox-api.dexcom.com/v2/oauth2/login?client_id=' + clientId + '&redirect_uri=https://spodolak.github.io/DexcomCGM&response_type=code&scope=offline_access&state=auth'}\r\n                        // href={'https://sandbox-api.dexcom.com/v2/oauth2/login?client_id=' + clientId + '&redirect_uri=http://localhost:3000&response_type=code&scope=offline_access&state=auth'}\r\n                        // href={'https://api.dexcom.com/v2/oauth2/login?client_id='+ clientId + '&redirect_uri=http://localhost:3000&response_type=code&scope=offline_access&state=auth'}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        onClick={() => props.onClickingLogIn}\r\n                    >\r\n                        <button className=\"outline\">Log In</button>\r\n                    </a>\r\n                </Grid>\r\n            </Grid>\r\n            <FootNavigation isLoggedIn={false} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nDexcom.propTypes = {\r\n    onClickingLogIn: PropTypes.func\r\n}\r\n\r\n\r\nexport default Dexcom;","import React from 'react';\r\nimport AppControl from './AppControl';\r\nimport Dexcom from './Dexcom';\r\nimport '../App.css';\r\n\r\nclass DexcomControl extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dexcomLoggedIn: false\r\n        };\r\n    }\r\n\r\n    handleDexcomLogin = () => {\r\n        this.setState({ dexcomLoggedIn: true });\r\n    }\r\n\r\n    render() {\r\n        let currentlyVisibleState = null;\r\n\r\n        if (window.location.search !== \"\") {\r\n            currentlyVisibleState = <AppControl onLogIn={this.handleDexcomLogin} />\r\n        } else if (window.location.search === \"\") {\r\n            let authorizationCode = window.location.search;\r\n            currentlyVisibleState =\r\n                <Dexcom code={authorizationCode} />\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    {currentlyVisibleState}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DexcomControl;","import React from 'react';\r\nimport './App.css';\r\nimport DexcomControl from './components/DexcomControl';\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"App\">\r\n                <DexcomControl />   \r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}