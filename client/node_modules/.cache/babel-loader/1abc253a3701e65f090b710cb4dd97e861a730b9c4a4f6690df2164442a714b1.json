{"ast":null,"code":"import React,{useEffect,useState}from'react';import CurrentBloodSugar from'./CurrentBloodSugar.js';import Calibrate from'./Calibrate.js';import AddHighSymptom from'./AddHighSymptom.js';import AddLowSymptom from'./AddLowSymptom.js';import AddSymptom from'./AddSymptom.js';import DexcomError from'./DexcomError.js';import Graph from'./Graph.js';import FootNavigation from'./AppFooter.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";class AppControl extends React.Component{constructor(props){super(props);this.authorizeDexcomUser=()=>{let code=window.location.search.slice(6,38);fetch('/authorizeDexcomUser?code='+code).then(response=>response.json()).then(data=>{this.setState({bloodSugarValues:data.egvs});this.setState({currentBloodSugar:data.egvs[287].value});console.log(data);});};this.handleAlert=()=>{if(this.state.currentBloodSugar<=this.state.lowAlert){this.setState({currentView:'add_low_symptom',currentAlert:'lowAlert'});}else if(this.state.currentBloodSugar>=this.state.highAlert){this.setState({currentView:'add_high_symptom',currentAlert:'highAlert'});}else{this.setState({currentAlert:'noAlert'});}};this.handleSwitchingViews=view=>{this.setState({currentView:view});};this.handleCalibrate=e=>{this.setState({currentBloodSugar:parseInt(e.target.value)});};this.state={error:null,isLoaded:false,bearerToken:'',currentBloodSugar:null,lowAlert:70,highAlert:180,currentAlert:'noAlert',//'lowAlert or 'highAlert'\nbloodSugarValues:null,currentView:null,timer:null};}componentDidMount(){if(this.state.bearerToken===''){this.authorizeDexcomUser();}else{this.getBloodSugars(this.state.bearerToken);}// setInterval(() => {\n//     this.getBloodSugars(this.state.bearerToken);\n//     this.handleAlert();\n// }, 60000);\n}render(){let currentlyVisibleState=null;if(this.state.bloodSugarValues!=null){switch(this.state.currentView){case'calibrate':currentlyVisibleState=/*#__PURE__*/_jsx(Calibrate,{onCalibrate:this.handleCalibrate,onSwitchingViews:this.handleSwitchingViews,alertCheck:this.handleAlert});break;case'add_symptom':currentlyVisibleState=/*#__PURE__*/_jsx(AddSymptom,{onSwitchingViews:this.handleSwitchingViews});break;case'add_low_symptom':currentlyVisibleState=/*#__PURE__*/_jsx(AddLowSymptom,{onSwitchingViews:this.handleSwitchingViews});break;case'add_high_symptom':currentlyVisibleState=/*#__PURE__*/_jsx(AddHighSymptom,{onSwitchingViews:this.handleSwitchingViews});break;case'graph':currentlyVisibleState=/*#__PURE__*/_jsx(Graph,{values:this.state.bloodSugarValues,onSwitchingViews:this.handleSwitchingViews});break;case'home':currentlyVisibleState=/*#__PURE__*/_jsx(CurrentBloodSugar,{value:this.state.currentBloodSugar,currentAlert:this.state.currentAlert,onSwitchingViews:this.handleSwitchingViews});break;default:currentlyVisibleState=/*#__PURE__*/_jsx(CurrentBloodSugar,{value:this.state.currentBloodSugar,currentAlert:this.state.currentAlert,onSwitchingViews:this.handleSwitchingViews});}}else{currentlyVisibleState=/*#__PURE__*/_jsx(DexcomError,{});}return/*#__PURE__*/_jsxs(React.Fragment,{children:[currentlyVisibleState,/*#__PURE__*/_jsx(FootNavigation,{isLoggedIn:true,onSwitchingViews:this.handleSwitchingViews,currentAlert:this.state.currentAlert})]});}}export default AppControl;","map":{"version":3,"names":["React","useEffect","useState","CurrentBloodSugar","Calibrate","AddHighSymptom","AddLowSymptom","AddSymptom","DexcomError","Graph","FootNavigation","jsx","_jsx","jsxs","_jsxs","AppControl","Component","constructor","props","authorizeDexcomUser","code","window","location","search","slice","fetch","then","response","json","data","setState","bloodSugarValues","egvs","currentBloodSugar","value","console","log","handleAlert","state","lowAlert","currentView","currentAlert","highAlert","handleSwitchingViews","view","handleCalibrate","e","parseInt","target","error","isLoaded","bearerToken","timer","componentDidMount","getBloodSugars","render","currentlyVisibleState","onCalibrate","onSwitchingViews","alertCheck","values","Fragment","children","isLoggedIn"],"sources":["/Users/macbook/Desktop/DexcomCGM/client/src/components/AppControl.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport CurrentBloodSugar from './CurrentBloodSugar.js';\nimport Calibrate from './Calibrate.js';\nimport AddHighSymptom from './AddHighSymptom.js';\nimport AddLowSymptom from './AddLowSymptom.js';\nimport AddSymptom from './AddSymptom.js';\nimport DexcomError from './DexcomError.js';\nimport Graph from './Graph.js';\nimport FootNavigation from './AppFooter.js';\n\nclass AppControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            bearerToken: '',\n            currentBloodSugar: null,\n            lowAlert: 70,\n            highAlert: 180,\n            currentAlert: 'noAlert', //'lowAlert or 'highAlert'\n            bloodSugarValues: null,\n            currentView: null,\n            timer: null\n        };\n    }\n\n    authorizeDexcomUser = () => {\n            let code = window.location.search.slice(6, 38);\n            fetch('/authorizeDexcomUser?code='+ code).then(\n                response => response.json()\n            ).then(\n                data => {\n                    this.setState({bloodSugarValues: data.egvs});\n                    this.setState({currentBloodSugar: data.egvs[287].value});\n                    console.log(data)\n                }\n            ) \n    }\n\n    componentDidMount() {\n        if (this.state.bearerToken === '') {\n            this.authorizeDexcomUser();\n        } \n        else {\n            this.getBloodSugars(this.state.bearerToken);\n        }\n        // setInterval(() => {\n        //     this.getBloodSugars(this.state.bearerToken);\n        //     this.handleAlert();\n        // }, 60000);\n    }\n\n    handleAlert = () => {\n        if (this.state.currentBloodSugar <= this.state.lowAlert) {\n            this.setState({ currentView: 'add_low_symptom', currentAlert: 'lowAlert' })\n        } else if (this.state.currentBloodSugar >= this.state.highAlert) {\n            this.setState({ currentView: 'add_high_symptom', currentAlert: 'highAlert' })\n        } else {\n            this.setState({ currentAlert: 'noAlert' })\n        }\n    }\n\n    handleSwitchingViews = (view) => {\n        this.setState({ currentView: view });\n    }\n\n    handleCalibrate = (e) => {\n        this.setState({ currentBloodSugar: parseInt(e.target.value) })\n    }\n\n    render() {\n        let currentlyVisibleState = null;\n        if (this.state.bloodSugarValues != null) {\n            switch (this.state.currentView) {\n                case 'calibrate':\n                    currentlyVisibleState = <Calibrate onCalibrate={this.handleCalibrate} onSwitchingViews={this.handleSwitchingViews} alertCheck={this.handleAlert} />\n                    break;\n                case 'add_symptom':\n                    currentlyVisibleState = <AddSymptom onSwitchingViews={this.handleSwitchingViews} />\n                    break;\n                case 'add_low_symptom':\n                    currentlyVisibleState = <AddLowSymptom onSwitchingViews={this.handleSwitchingViews} />\n                    break;\n                case 'add_high_symptom':\n                    currentlyVisibleState = <AddHighSymptom onSwitchingViews={this.handleSwitchingViews} />\n                    break;\n                case 'graph':\n                    currentlyVisibleState = <Graph values={this.state.bloodSugarValues} onSwitchingViews={this.handleSwitchingViews} />\n                    break;\n                case 'home':\n                    currentlyVisibleState = <CurrentBloodSugar value={this.state.currentBloodSugar} currentAlert={this.state.currentAlert} onSwitchingViews={this.handleSwitchingViews} />\n                    break;\n                default:\n                    currentlyVisibleState = <CurrentBloodSugar value={this.state.currentBloodSugar} currentAlert={this.state.currentAlert} onSwitchingViews={this.handleSwitchingViews} />\n            }\n        } else {\n            currentlyVisibleState = <DexcomError />\n        }\n        return (\n            <React.Fragment>\n                {currentlyVisibleState}\n                <FootNavigation isLoggedIn={true} onSwitchingViews={this.handleSwitchingViews} currentAlert={this.state.currentAlert} />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default AppControl;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}