{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { deepmerge } from '@material-ui/utils';\nimport noopTheme from './noopTheme';\nexport default function getStylesCreator(stylesOrCreator) {\n  var themingEnabled = typeof stylesOrCreator === 'function';\n  if (process.env.NODE_ENV !== 'production') {\n    if (_typeof(stylesOrCreator) !== 'object' && !themingEnabled) {\n      console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n'));\n    }\n  }\n  return {\n    create: function create(theme, name) {\n      var styles;\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (themingEnabled === true && theme === noopTheme) {\n            // TODO: prepend error message/name instead\n            console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n          }\n        }\n        throw err;\n      }\n      if (!name || !theme.overrides || !theme.overrides[name]) {\n        return styles;\n      }\n      var overrides = theme.overrides[name];\n      var stylesWithOverrides = _extends({}, styles);\n      Object.keys(overrides).forEach(function (key) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!stylesWithOverrides[key]) {\n            console.warn(['Material-UI: You are trying to override a style that does not exist.', \"Fix the `\".concat(key, \"` key of `theme.overrides.\").concat(name, \"`.\")].join('\\n'));\n          }\n        }\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key]);\n      });\n      return stylesWithOverrides;\n    },\n    options: {}\n  };\n}","map":{"version":3,"names":["_extends","_typeof","deepmerge","noopTheme","getStylesCreator","stylesOrCreator","themingEnabled","process","env","NODE_ENV","console","error","join","create","theme","name","styles","err","overrides","stylesWithOverrides","Object","keys","forEach","key","warn","concat","options"],"sources":["/Users/macbook/Desktop/DexcomCGM/client/node_modules/@material-ui/styles/esm/getStylesCreator/getStylesCreator.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { deepmerge } from '@material-ui/utils';\nimport noopTheme from './noopTheme';\nexport default function getStylesCreator(stylesOrCreator) {\n  var themingEnabled = typeof stylesOrCreator === 'function';\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (_typeof(stylesOrCreator) !== 'object' && !themingEnabled) {\n      console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n'));\n    }\n  }\n\n  return {\n    create: function create(theme, name) {\n      var styles;\n\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (themingEnabled === true && theme === noopTheme) {\n            // TODO: prepend error message/name instead\n            console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n          }\n        }\n\n        throw err;\n      }\n\n      if (!name || !theme.overrides || !theme.overrides[name]) {\n        return styles;\n      }\n\n      var overrides = theme.overrides[name];\n\n      var stylesWithOverrides = _extends({}, styles);\n\n      Object.keys(overrides).forEach(function (key) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!stylesWithOverrides[key]) {\n            console.warn(['Material-UI: You are trying to override a style that does not exist.', \"Fix the `\".concat(key, \"` key of `theme.overrides.\").concat(name, \"`.\")].join('\\n'));\n          }\n        }\n\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key]);\n      });\n      return stylesWithOverrides;\n    },\n    options: {}\n  };\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,OAAO,MAAM,mCAAmC;AACvD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAOC,SAAS,MAAM,aAAa;AACnC,eAAe,SAASC,gBAAgBA,CAACC,eAAe,EAAE;EACxD,IAAIC,cAAc,GAAG,OAAOD,eAAe,KAAK,UAAU;EAE1D,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAIR,OAAO,CAACI,eAAe,CAAC,KAAK,QAAQ,IAAI,CAACC,cAAc,EAAE;MAC5DI,OAAO,CAACC,KAAK,CAAC,CAAC,yDAAyD,EAAE,0EAA0E,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnK;EACF;EAEA,OAAO;IACLC,MAAM,EAAE,SAASA,MAAMA,CAACC,KAAK,EAAEC,IAAI,EAAE;MACnC,IAAIC,MAAM;MAEV,IAAI;QACFA,MAAM,GAAGV,cAAc,GAAGD,eAAe,CAACS,KAAK,CAAC,GAAGT,eAAe;MACpE,CAAC,CAAC,OAAOY,GAAG,EAAE;QACZ,IAAIV,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzC,IAAIH,cAAc,KAAK,IAAI,IAAIQ,KAAK,KAAKX,SAAS,EAAE;YAClD;YACAO,OAAO,CAACC,KAAK,CAAC,CAAC,yDAAyD,EAAE,8DAA8D,EAAE,0DAA0D,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;UACnN;QACF;QAEA,MAAMK,GAAG;MACX;MAEA,IAAI,CAACF,IAAI,IAAI,CAACD,KAAK,CAACI,SAAS,IAAI,CAACJ,KAAK,CAACI,SAAS,CAACH,IAAI,CAAC,EAAE;QACvD,OAAOC,MAAM;MACf;MAEA,IAAIE,SAAS,GAAGJ,KAAK,CAACI,SAAS,CAACH,IAAI,CAAC;MAErC,IAAII,mBAAmB,GAAGnB,QAAQ,CAAC,CAAC,CAAC,EAAEgB,MAAM,CAAC;MAE9CI,MAAM,CAACC,IAAI,CAACH,SAAS,CAAC,CAACI,OAAO,CAAC,UAAUC,GAAG,EAAE;QAC5C,IAAIhB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzC,IAAI,CAACU,mBAAmB,CAACI,GAAG,CAAC,EAAE;YAC7Bb,OAAO,CAACc,IAAI,CAAC,CAAC,sEAAsE,EAAE,WAAW,CAACC,MAAM,CAACF,GAAG,EAAE,4BAA4B,CAAC,CAACE,MAAM,CAACV,IAAI,EAAE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAC,IAAI,CAAC,CAAC;UAC7K;QACF;QAEAO,mBAAmB,CAACI,GAAG,CAAC,GAAGrB,SAAS,CAACiB,mBAAmB,CAACI,GAAG,CAAC,EAAEL,SAAS,CAACK,GAAG,CAAC,CAAC;MAChF,CAAC,CAAC;MACF,OAAOJ,mBAAmB;IAC5B,CAAC;IACDO,OAAO,EAAE,CAAC;EACZ,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}