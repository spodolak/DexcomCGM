{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"onSelect\", \"activeKey\", \"role\", \"onKeyDown\"];\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useContext, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport TabContext from './TabContext';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nvar noop = function noop() {};\nvar AbstractNav = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n    Component = _ref$as === void 0 ? 'ul' : _ref$as,\n    onSelect = _ref.onSelect,\n    activeKey = _ref.activeKey,\n    role = _ref.role,\n    onKeyDown = _ref.onKeyDown,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  // A ref and forceUpdate for refocus, b/c we only want to trigger when needed\n  // and don't want to reset the set in the effect\n  var forceUpdate = useForceUpdate();\n  var needsRefocusRef = useRef(false);\n  var parentOnSelect = useContext(SelectableContext);\n  var tabContext = useContext(TabContext);\n  var getControlledId, getControllerId;\n  if (tabContext) {\n    role = role || 'tablist';\n    activeKey = tabContext.activeKey;\n    getControlledId = tabContext.getControlledId;\n    getControllerId = tabContext.getControllerId;\n  }\n  var listNode = useRef(null);\n  var getNextActiveChild = function getNextActiveChild(offset) {\n    var currentListNode = listNode.current;\n    if (!currentListNode) return null;\n    var items = qsa(currentListNode, '[data-rb-event-key]:not(.disabled)');\n    var activeChild = currentListNode.querySelector('.active');\n    if (!activeChild) return null;\n    var index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    var nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n  var handleSelect = function handleSelect(key, event) {\n    if (key == null) return;\n    if (onSelect) onSelect(key, event);\n    if (parentOnSelect) parentOnSelect(key, event);\n  };\n  var handleKeyDown = function handleKeyDown(event) {\n    if (onKeyDown) onKeyDown(event);\n    var nextActiveChild;\n    switch (event.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveChild(-1);\n        break;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveChild(1);\n        break;\n      default:\n        return;\n    }\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect(nextActiveChild.dataset.rbEventKey, event);\n    needsRefocusRef.current = true;\n    forceUpdate();\n  };\n  useEffect(function () {\n    if (listNode.current && needsRefocusRef.current) {\n      var activeChild = listNode.current.querySelector('[data-rb-event-key].active');\n      if (activeChild) activeChild.focus();\n    }\n    needsRefocusRef.current = false;\n  });\n  var mergedRef = useMergedRefs(ref, listNode);\n  return /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: handleSelect\n  }, /*#__PURE__*/React.createElement(NavContext.Provider, {\n    value: {\n      role: role,\n      // used by NavLink to determine it's role\n      activeKey: makeEventKey(activeKey),\n      getControlledId: getControlledId || noop,\n      getControllerId: getControllerId || noop\n    }\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    onKeyDown: handleKeyDown,\n    ref: mergedRef,\n    role: role\n  }))));\n});\nexport default AbstractNav;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","qsa","React","useContext","useEffect","useRef","useForceUpdate","useMergedRefs","NavContext","SelectableContext","makeEventKey","TabContext","noop","AbstractNav","forwardRef","_ref","ref","_ref$as","as","Component","onSelect","activeKey","role","onKeyDown","props","forceUpdate","needsRefocusRef","parentOnSelect","tabContext","getControlledId","getControllerId","listNode","getNextActiveChild","offset","currentListNode","current","items","activeChild","querySelector","index","indexOf","nextIndex","length","handleSelect","key","event","handleKeyDown","nextActiveChild","preventDefault","dataset","rbEventKey","focus","mergedRef","createElement","Provider","value"],"sources":["/Users/macbook/Desktop/DexcomCGM/node_modules/react-bootstrap/esm/AbstractNav.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"onSelect\", \"activeKey\", \"role\", \"onKeyDown\"];\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useContext, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport TabContext from './TabContext';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nvar noop = function noop() {};\n\nvar AbstractNav = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'ul' : _ref$as,\n      onSelect = _ref.onSelect,\n      activeKey = _ref.activeKey,\n      role = _ref.role,\n      onKeyDown = _ref.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  // A ref and forceUpdate for refocus, b/c we only want to trigger when needed\n  // and don't want to reset the set in the effect\n  var forceUpdate = useForceUpdate();\n  var needsRefocusRef = useRef(false);\n  var parentOnSelect = useContext(SelectableContext);\n  var tabContext = useContext(TabContext);\n  var getControlledId, getControllerId;\n\n  if (tabContext) {\n    role = role || 'tablist';\n    activeKey = tabContext.activeKey;\n    getControlledId = tabContext.getControlledId;\n    getControllerId = tabContext.getControllerId;\n  }\n\n  var listNode = useRef(null);\n\n  var getNextActiveChild = function getNextActiveChild(offset) {\n    var currentListNode = listNode.current;\n    if (!currentListNode) return null;\n    var items = qsa(currentListNode, '[data-rb-event-key]:not(.disabled)');\n    var activeChild = currentListNode.querySelector('.active');\n    if (!activeChild) return null;\n    var index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    var nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n\n  var handleSelect = function handleSelect(key, event) {\n    if (key == null) return;\n    if (onSelect) onSelect(key, event);\n    if (parentOnSelect) parentOnSelect(key, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (onKeyDown) onKeyDown(event);\n    var nextActiveChild;\n\n    switch (event.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveChild(-1);\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveChild(1);\n        break;\n\n      default:\n        return;\n    }\n\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect(nextActiveChild.dataset.rbEventKey, event);\n    needsRefocusRef.current = true;\n    forceUpdate();\n  };\n\n  useEffect(function () {\n    if (listNode.current && needsRefocusRef.current) {\n      var activeChild = listNode.current.querySelector('[data-rb-event-key].active');\n      if (activeChild) activeChild.focus();\n    }\n\n    needsRefocusRef.current = false;\n  });\n  var mergedRef = useMergedRefs(ref, listNode);\n  return /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: handleSelect\n  }, /*#__PURE__*/React.createElement(NavContext.Provider, {\n    value: {\n      role: role,\n      // used by NavLink to determine it's role\n      activeKey: makeEventKey(activeKey),\n      getControlledId: getControlledId || noop,\n      getControllerId: getControllerId || noop\n    }\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    onKeyDown: handleKeyDown,\n    ref: mergedRef,\n    role: role\n  }))));\n});\nexport default AbstractNav;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}